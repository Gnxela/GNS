class TestClass {
	class NestedClass {
		tee = hee = null
		func init(i, j) {
			foo(i)
			bar(j)
		}
		func foo(i) {
			tee = i + 2
		}
		func bar(i) {
			hee = i + 1
		}
	}
	var = 0
	func init(i) {
		work(i)
	}
	func work(num) {
		var = num + 3
	}
	b = new NestedClass(var, var + 10)
}
i = 5
func test(j) {
	if (j == 5) {
		i = i + 1
	}
}
func foo(i, j) {
	test(i)
	test(i)
	test(j)
}
foo(i, 0)

a = new TestClass(10)
x = 1
x = y = 0

print(1)
print(a)
print(true)
print(false)
print(null)
c = new String(1)
print(nilIdentifier)

func retFunc() {
	return 19
}
print(retFunc())

print(1 < 2)
print(2 < 2)
print(3 < 2)

// TODO: The below list
/*
	Comments DONE
	Built in object properties: objectid, type DONE
	Accessor (".") DONE
	Operation functions
*/

print(a.objectId)
print(a.b.tee)

class HasOps {
	i = 0

	func init(j) {
		i = j
	}

	func +(a) {
		if (a.type == type) {
			return new HasOps(i + a.i)
		}
		return null
	}
}